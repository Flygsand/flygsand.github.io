{"componentChunkName":"component---src-templates-blog-js","path":"/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"excerpt":"<p>It's been <a href=\"http://web.archive.org/web/20100212123437/http://freeasinbeard.org/\" target=\"_self\" rel=\"nofollow noopener noreferrer\">about ten years</a> since last I ran a blog.\nThe technological landscape has shifted a lot during those ten years, particularly in the web app space. We now have\ncool things like <a href=\"https://reactjs.org\" target=\"_self\" rel=\"nofollow noopener noreferrer\">React</a>, <a href=\"https://graphql.org\" target=\"_self\" rel=\"nofollow noopener noreferrer\">GraphQL</a>, <a href=\"https://letsencrypt.org\" target=\"_self\" rel=\"nofollow noopener noreferrer\">Let's Encrypt</a>,\n<a href=\"https://www.docker.com\" target=\"_self\" rel=\"nofollow noopener noreferrer\">Docker</a>, and a mature <a href=\"https://nodejs.org\" target=\"_self\" rel=\"nofollow noopener noreferrer\">Node.js</a> ecosystem. Back then I was doing most of\nmy web development in Ruby and Python. In this post, I'd like to illustrate how this site is put together.</p>","fields":{"slug":"how-this-site-gets-built"},"frontmatter":{"title":"How This Site Gets Built","tags":["ci","frontend"]}}},{"node":{"excerpt":"<p>In this post, we will look at how smart pointers can be used to implement a RAII interface to C libraries. This is the\nbasis for my <a href=\"https://github.com/kvadevack/sdl2xx\" target=\"_self\" rel=\"nofollow noopener noreferrer\">SDL2 wrapper</a>. Using this method, we don't have to write wrapper classes.</p>","fields":{"slug":"wrapping-c-libraries-with-smart-pointers"},"frontmatter":{"title":"Wrapping C Libraries With Smart Pointers","tags":["programming","c++"]}}},{"node":{"excerpt":"<p>libnx is now capable of calling up system applets, including the virtual keyboard and captive portal browser. With these\ntwo components, it should be straightforward to implement a makeshift web browser. </p>","fields":{"slug":"nintendo-switch-virtual-keyboard"},"frontmatter":{"title":"Nintendo Switch Virtual Keyboard","tags":["programming","switch"]}}},{"node":{"excerpt":"<p>Grim Fandango remains one of my all-time favorite video games, and the remaster stays true to the original. The setting,\nmusic, and writing are superb. It oozes charm, creativity, and a sense of atmosphere that sets it apart from many other\nadventure games. But the faithful recreation leaves several gameplay aspects showing their age.</p>","fields":{"slug":"playlog-december-2018-grim-fandango-remastered"},"frontmatter":{"title":"Playlog December 2018: Grim Fandango Remastered","tags":["gaming","switch"]}}},{"node":{"excerpt":"<p>One of the more exciting proposals for the upcoming C++20 revision is the module system\n(<a href=\"https://www.iso.org/standard/71051.html\" target=\"_self\" rel=\"nofollow noopener noreferrer\">ISO/IEC TS 21544:2018</a>). This proposal aims to solve a number of problems\nwith C++ - not the least of which is compile times for large code bases. In this post, we will have a brief look at how\nmodules can be used with current tooling.</p>","fields":{"slug":"cxx-modules"},"frontmatter":{"title":"C++ Modules","tags":["programming","c++"]}}}]}},"pageContext":{"limit":5,"skip":0,"pageNumber":1,"totalPages":1}},"staticQueryHashes":["1493414967","2602121688","63159454"]}