{"componentChunkName":"component---src-templates-post-js","path":"/post/cxx-modules","result":{"data":{"site":{"id":"Site","siteMetadata":{"repo":"kvadevack/site","social":{"twitter":"kvadevack","github":"kvadevack"}}},"markdownRemark":{"id":"5277c3bd-2b03-5e3e-b3e8-936e9ac611d6","html":"<p>One of the more exciting proposals for the upcoming C++20 revision is the module system\n(<a href=\"https://www.iso.org/standard/71051.html\" target=\"_self\" rel=\"nofollow noopener noreferrer\">ISO/IEC TS 21544:2018</a>). This proposal aims to solve a number of problems\nwith C++ - not the least of which is compile times for large code bases. In this post, we will have a brief look at how\nmodules can be used with current tooling.<!-- jump --></p>\n<p>Consider the following Hello World program (courtesy of <a href=\"https://sv.wikipedia.org/wiki/Hello_World\" target=\"_self\" rel=\"nofollow noopener noreferrer\">Wikipedia</a>):</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello, World!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>An <code class=\"language-text\">#include</code> directive essentially tells the preprocessor to copy the contents of the referenced header file into the\ncurrent translation unit. When taking transitive inclusion into account, you end up with a massively bloated input to\nthe compile stage:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cpp -E hello_world.cpp | wc -l\n28259</code></pre></div>\n<p>Over 28 kLOC for such a simple program! There is no way for us to specify which parts of <code class=\"language-text\">&lt;iostream&gt;</code> we need, and so we\nend up with everything. This also highlights another problem with <code class=\"language-text\">#include</code> - everything in the header file becomes\nthe public interface. Applications might end up depending on details outside of the intended API. Some libraries, like\nBoost, end up using a <code class=\"language-text\">detail</code> (or similarly named) namespace for things that applications aren't supposed to rely on,\nand make that explicit.</p>\n<p>Modules solve this by eliminating <code class=\"language-text\">#include</code> altogether. Let's see how we can use them.</p>\n<h2>Trying it out</h2>\n<p>Modules can currently be enabled using compiler flags:</p>\n<ul>\n<li>Clang and GCC: <code class=\"language-text\">-fmodules-ts</code></li>\n<li>MSVC: <code class=\"language-text\">/experimental:module</code></li>\n</ul>\n<p>There is as of writing this no support for modules in CMake, so we have to roll our own:</p>\n<p><div class=\"gatsby-highlight\">\n        <pre class=\"language-txt\"><code class=\"language-txt\">cmake_minimum_required(VERSION 3.2...3.13)\nproject(cpp_modules VERSION 0.1.0 LANGUAGES CXX)\n\ninclude(CXXModules.cmake)\n\nadd_module_library(math math.cpp)\nadd_module_executable(cxx_modules main.cpp)\ntarget_link_module_libraries(cxx_modules math)</code></pre>\n        </div></p>\n<p>Next, we define a simple math library that exports a module:</p>\n<p><div class=\"gatsby-highlight\">\n        <pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">export</span> module math<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">namespace</span> math <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n        </div></p>\n<p>Note how we define a namespace with the same name as our module. This is not in any way required - in fact, modules\n(like headers) are orthogonal to namespaces. This means that a namespace could be implemented across several modules,\nwhich is useful for things like the standard library.</p>\n<p>Let's have a look at how modules are consumed:</p>\n<p><div class=\"gatsby-highlight\">\n        <pre class=\"language-cpp\"><code class=\"language-cpp\">import math<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tmath<span class=\"token operator\">::</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n        </div></p>","frontmatter":{"title":"C++ Modules","date":"October 28th 2018"}}},"pageContext":{"slug":"cxx-modules","previous":null,"next":{"fields":{"slug":"playlog-december-2018-grim-fandango-remastered"}},"hasExample":true}}}