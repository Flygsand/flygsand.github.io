{"componentChunkName":"component---src-templates-post-js","path":"/post/wrapping-c-libraries-with-smart-pointers","webpackCompilationHash":"c5fd97f60566efd6d603","result":{"data":{"site":{"siteMetadata":{"repo":"kvadevack/site","social":{"twitter":"kvadevack","github":"kvadevack"}}},"markdownRemark":{"html":"<p>In this post, we will look at how smart pointers can be used to implement a RAII interface to C libraries. This is the\nbasis for my <a href=\"https://github.com/kvadevack/sdl2xx\" target=\"_self\" rel=\"nofollow noopener noreferrer\">SDL2 wrapper</a>. Using this method, we don't have to write wrapper classes.<!-- jump --></p>\n<p>SDL uses the common C design pattern of <a href=\"https://en.wikipedia.org/wiki/Opaque_data_type\" target=\"_self\" rel=\"nofollow noopener noreferrer\">opaque types</a>, in which the\nimplementation details of a type are hidden through use of <a href=\"https://en.wikipedia.org/wiki/Forward_declaration\" target=\"_self\" rel=\"nofollow noopener noreferrer\">forward declaration</a>.\nConsider <code class=\"language-text\">SDL_Renderer</code>, which is declared in <code class=\"language-text\">SDL_render.h</code> like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">SDL_Renderer</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">SDL_Renderer</span> SDL_Renderer<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The actual definition of <code class=\"language-text\">struct SDL_Renderer</code> is omitted from the header files. Alongside the above are a number of\nfunction declarations, most notably the \"constructor\" and \"destructor\":</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">extern</span> DECLSPEC SDL_Renderer <span class=\"token operator\">*</span> SDLCALL <span class=\"token function\">SDL_CreateRenderer</span><span class=\"token punctuation\">(</span>SDL_Window <span class=\"token operator\">*</span> window<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> Uint32 flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> DECLSPEC <span class=\"token keyword\">void</span> SDLCALL <span class=\"token function\">SDL_DestroyRenderer</span><span class=\"token punctuation\">(</span>SDL_Renderer <span class=\"token operator\">*</span> renderer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This gives C libraries an \"OOP feel\", as seen here:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">SDL_Renderer r <span class=\"token operator\">=</span> <span class=\"token function\">SDL_CreateRenderer</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> SDL_RENDERER_ACCELERATED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">SDL_SetRenderDrawColor</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">SDL_RenderClear</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">SDL_SetRenderDrawColor</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSDL_Rect <span class=\"token function\">rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">SDL_RenderFillRect</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">SDL_RenderPresent</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The example above is incomplete, as the programmer forgot to call <code class=\"language-text\">SDL_DestroyRenderer</code>, resulting in a resource leak.\nThankfully, in C++ land we have language support for dealing with such pitfalls. Enter <a href=\"https://en.wikipedia.org/wiki/Smart_pointer\" target=\"_self\" rel=\"nofollow noopener noreferrer\">smart pointers</a>:</p>\n<p>This can be generalized using templates, like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Creator<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> Destructor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Arguments<span class=\"token operator\">></span>\n<span class=\"token keyword\">auto</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>Creator c<span class=\"token punctuation\">,</span> Destructor d<span class=\"token punctuation\">,</span> Arguments<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> r <span class=\"token operator\">=</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token operator\">::</span>std<span class=\"token operator\">::</span>forward<span class=\"token operator\">&lt;</span>Arguments<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token operator\">::</span>std<span class=\"token operator\">::</span><span class=\"token function\">system_error</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">,</span> <span class=\"token operator\">::</span>std<span class=\"token operator\">::</span><span class=\"token function\">generic_category</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SDL_GetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">::</span>std<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token operator\">::</span>std<span class=\"token operator\">::</span>decay_t<span class=\"token operator\">&lt;</span><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">using</span> Renderer <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>SDL_Renderer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>SDL_DestroyRenderer<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">inline</span> Renderer <span class=\"token function\">CreateRenderer</span><span class=\"token punctuation\">(</span>SDL_Window<span class=\"token operator\">*</span> window<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> Uint32 flags<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>SDL_CreateRenderer<span class=\"token punctuation\">,</span> SDL_DestroyRenderer<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and the above example rewritten like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">auto</span> r <span class=\"token operator\">=</span> <span class=\"token function\">CreateRenderer</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> SDL_RENDERER_ACCELERATED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">SDL_SetRenderDrawColor</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">SDL_RenderClear</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">SDL_SetRenderDrawColor</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSDL_Rect <span class=\"token function\">rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">SDL_RenderFillRect</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">SDL_RenderPresent</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We no longer have to worry about calling <code class=\"language-text\">SDL_DestroyRenderer</code>, as it is called automatically when <code class=\"language-text\">r</code> goes out of scope.</p>\n<h2>A word on unique_ptr</h2>\n<p>As <code class=\"language-text\">unique_ptr</code> models singular ownership, it does not implement a copy constructor. In other words, it cannot be passed\nby value. If you need to model multiple ownership, use the reference counting <code class=\"language-text\">shared_ptr</code> instead. It can easily and\nefficiently be constructed from a <code class=\"language-text\">std::unique_ptr</code> like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">auto</span> sharedPtr <span class=\"token operator\">=</span> <span class=\"token function\">make_shared_from</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>uniquePtr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The reverse is not possible. It is generally a bad idea to design your API to require a specific pointer implementation,\nand specifically <code class=\"language-text\">std::unique_ptr</code> <a href=\"https://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/\" target=\"_self\" rel=\"nofollow noopener noreferrer\">unless ownership transfer is implied</a>.</p>","frontmatter":{"title":"Wrapping C Libraries With Smart Pointers","date":"January 31st 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"wrapping-c-libraries-with-smart-pointers","previous":{"fields":{"slug":"nintendo-switch-virtual-keyboard"}},"next":{"fields":{"slug":"how-this-site-gets-built"}},"hasExample":true}}}